import VD.codiscreteWithin
import VD.stronglyMeromorphicOn_ratlPolynomial

open scoped Interval Topology
open Real Filter MeasureTheory intervalIntegral

theorem MeromorphicOn.decompose‚ÇÅ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (h‚ÇÅf : MeromorphicOn f U)
  (h‚ÇÇf : StronglyMeromorphicAt f z‚ÇÄ)
  (h‚ÇÉf : h‚ÇÇf.meromorphicAt.order ‚â† ‚ä§)
  (hz‚ÇÄ : z‚ÇÄ ‚àà U) :
  ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (MeromorphicOn g U)
    ‚àß (AnalyticAt ‚ÑÇ g z‚ÇÄ)
    ‚àß (g z‚ÇÄ ‚â† 0)
    ‚àß (f = g * fun z ‚Ü¶ (z - z‚ÇÄ) ^ (h‚ÇÅf.divisor z‚ÇÄ)) := by

  let h‚ÇÅ := fun z ‚Ü¶ (z - z‚ÇÄ) ^ (-h‚ÇÅf.divisor z‚ÇÄ)
  have h‚ÇÅh‚ÇÅ : MeromorphicOn h‚ÇÅ U := by
    apply MeromorphicOn.zpow
    apply AnalyticOnNhd.meromorphicOn
    apply AnalyticOnNhd.sub
    exact analyticOnNhd_id
    exact analyticOnNhd_const
  let n : ‚Ñ§ := (-h‚ÇÅf.divisor z‚ÇÄ)
  have h‚ÇÇh‚ÇÅ : (h‚ÇÅh‚ÇÅ z‚ÇÄ hz‚ÇÄ).order = n := by
    simp_rw [(h‚ÇÅh‚ÇÅ z‚ÇÄ hz‚ÇÄ).order_eq_int_iff]
    use 1
    constructor
    ¬∑ apply analyticAt_const
    ¬∑ constructor
      ¬∑ simp
      ¬∑ apply eventually_nhdsWithin_of_forall
        intro z hz
        simp [n, h‚ÇÅ]

  let g‚ÇÅ := f * h‚ÇÅ
  have h‚ÇÅg‚ÇÅ : MeromorphicOn g‚ÇÅ U := by
    apply h‚ÇÅf.mul h‚ÇÅh‚ÇÅ
  have h‚ÇÇg‚ÇÅ : (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ).order = 0 := by
    rw [(h‚ÇÅf z‚ÇÄ hz‚ÇÄ).order_mul (h‚ÇÅh‚ÇÅ z‚ÇÄ hz‚ÇÄ)]
    rw [h‚ÇÇh‚ÇÅ]
    unfold n
    rw [MeromorphicOn.divisor_def‚ÇÇ h‚ÇÅf hz‚ÇÄ h‚ÇÉf]
    conv =>
      left
      left
      rw [Eq.symm (WithTop.coe_untop (h‚ÇÅf z‚ÇÄ hz‚ÇÄ).order h‚ÇÉf)]
    have
      (a b c : ‚Ñ§)
      (h : a + b = c) :
      (a : WithTop ‚Ñ§) + (b : WithTop ‚Ñ§) = (c : WithTop ‚Ñ§) := by
      rw [‚Üê h]
      simp
    rw [this ((h‚ÇÅf z‚ÇÄ hz‚ÇÄ).order.untop h‚ÇÉf) (-(h‚ÇÅf z‚ÇÄ hz‚ÇÄ).order.untop h‚ÇÉf) 0]
    simp
    ring

  let g := (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ).makeStronglyMeromorphicAt
  have h‚ÇÇg : StronglyMeromorphicAt g z‚ÇÄ := by
    exact StronglyMeromorphicAt_of_makeStronglyMeromorphic (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ)
  have h‚ÇÅg : MeromorphicOn g U := by
    intro z hz
    by_cases h‚ÇÅz : z = z‚ÇÄ
    ¬∑ rw [h‚ÇÅz]
      apply h‚ÇÇg.meromorphicAt
    ¬∑ apply (h‚ÇÅg‚ÇÅ z hz).congr
      rw [eventuallyEq_nhdsWithin_iff]
      rw [eventually_nhds_iff]
      use {z‚ÇÄ}·∂ú
      constructor
      ¬∑ intro y h‚ÇÅy h‚ÇÇy
        let A := m‚ÇÅ (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ) y h‚ÇÅy
        unfold g
        rw [‚Üê A]
      ¬∑ constructor
        ¬∑ exact isOpen_compl_singleton
        ¬∑ exact h‚ÇÅz
  have h‚ÇÉg : (h‚ÇÅg z‚ÇÄ hz‚ÇÄ).order = 0 := by
    unfold g
    let B := m‚ÇÇ (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ)
    let A := (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ).order_congr B
    rw [‚Üê A]
    rw [h‚ÇÇg‚ÇÅ]
  have h‚ÇÑg : AnalyticAt ‚ÑÇ g z‚ÇÄ := by
    apply h‚ÇÇg.analytic
    rw [h‚ÇÉg]

  use g
  constructor
  ¬∑ exact h‚ÇÅg
  ¬∑ constructor
    ¬∑ exact h‚ÇÑg
    ¬∑ constructor
      ¬∑ exact (h‚ÇÇg.order_eq_zero_iff).mp h‚ÇÉg
      ¬∑ funext z
        by_cases hz : z = z‚ÇÄ
        ¬∑ rw [hz]
          simp
          by_cases h : h‚ÇÅf.divisor z‚ÇÄ = 0
          ¬∑ simp [h]
            have h‚ÇÇh‚ÇÅ : h‚ÇÅ = 1 := by
              funext w
              unfold h‚ÇÅ
              simp [h]
            have h‚ÇÉg‚ÇÅ : g‚ÇÅ = f := by
              unfold g‚ÇÅ
              rw [h‚ÇÇh‚ÇÅ]
              simp
            have h‚ÇÑg‚ÇÅ : StronglyMeromorphicAt g‚ÇÅ z‚ÇÄ := by
              rwa [h‚ÇÉg‚ÇÅ]
            let A := h‚ÇÑg‚ÇÅ.makeStronglyMeromorphic_id
            unfold g
            rw [‚Üê A, h‚ÇÉg‚ÇÅ]
          ¬∑ have : (0 : ‚ÑÇ) ^ h‚ÇÅf.divisor z‚ÇÄ = (0 : ‚ÑÇ) := by
              exact zero_zpow (h‚ÇÅf.divisor z‚ÇÄ) h
            rw [this]
            simp
            let A := h‚ÇÇf.order_eq_zero_iff.not
            simp at A
            rw [‚Üê A]
            unfold MeromorphicOn.divisor at h
            simp [hz‚ÇÄ] at h
            exact h.1
        ¬∑ simp
          let B := m‚ÇÅ (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ) z hz
          unfold g
          rw [‚Üê B]
          unfold g‚ÇÅ h‚ÇÅ
          simp [hz]
          rw [mul_assoc]
          rw [inv_mul_cancel‚ÇÄ]
          simp
          apply zpow_ne_zero
          rwa [sub_ne_zero]


theorem MeromorphicOn.decompose‚ÇÇ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {P : Finset U}
  (hf : StronglyMeromorphicOn f U) :
  (‚àÄ p ‚àà P, (hf p p.2).meromorphicAt.order ‚â† ‚ä§) ‚Üí
    ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (MeromorphicOn g U)
    ‚àß (‚àÄ p : P, AnalyticAt ‚ÑÇ g p)
    ‚àß (‚àÄ p : P, g p ‚â† 0)
    ‚àß (f = g * ‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (hf.meromorphicOn.divisor p.1.1)) := by

  apply Finset.induction (p := fun (P : Finset U) ‚Ü¶
    (‚àÄ p ‚àà P, (hf p p.2).meromorphicAt.order ‚â† ‚ä§) ‚Üí
    ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (MeromorphicOn g U)
    ‚àß (‚àÄ p : P, AnalyticAt ‚ÑÇ g p)
    ‚àß (‚àÄ p : P, g p ‚â† 0)
    ‚àß (f = g * ‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (hf.meromorphicOn.divisor p.1.1)))

  -- case empty
  simp
  exact hf.meromorphicOn

  -- case insert
  intro u P hu iHyp
  intro hOrder
  obtain ‚ü®g‚ÇÄ, h‚ÇÅg‚ÇÄ, h‚ÇÇg‚ÇÄ, h‚ÇÉg‚ÇÄ, h‚ÇÑg‚ÇÄ‚ü© := iHyp (fun p hp ‚Ü¶ hOrder p (Finset.mem_insert_of_mem hp))

  have h‚ÇÄ : AnalyticAt ‚ÑÇ (‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (hf.meromorphicOn.divisor p.1.1)) u := by
    have : (‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (hf.meromorphicOn.divisor p.1.1)) = (fun z => ‚àè p : P, (z - p.1.1) ^ (hf.meromorphicOn.divisor p.1.1)) := by
      funext w
      simp
    rw [this]
    apply Finset.analyticAt_prod
    intro p hp
    apply AnalyticAt.zpow
    fun_prop
    by_contra hCon
    rw [sub_eq_zero] at hCon
    have : p.1 = u := by
      exact SetCoe.ext (_root_.id (Eq.symm hCon))
    rw [‚Üê this] at hu
    simp [hp] at hu

  have h‚ÇÅ : (‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (hf.meromorphicOn.divisor p.1.1)) u ‚â† 0 := by
    simp only [Finset.prod_apply]
    rw [Finset.prod_ne_zero_iff]
    intro p hp
    apply zpow_ne_zero
    by_contra hCon
    rw [sub_eq_zero] at hCon
    have : p.1 = u := by
      exact SetCoe.ext (_root_.id (Eq.symm hCon))
    rw [‚Üê this] at hu
    simp [hp] at hu

  have h‚ÇÖg‚ÇÄ : StronglyMeromorphicAt g‚ÇÄ u := by
    rw [stronglyMeromorphicAt_of_mul_analytic h‚ÇÄ h‚ÇÅ]
    rw [‚Üê h‚ÇÑg‚ÇÄ]
    exact hf u u.2

  have h‚ÇÜg‚ÇÄ : (h‚ÇÅg‚ÇÄ u u.2).order ‚â† ‚ä§ := by
    by_contra hCon
    let A := (h‚ÇÅg‚ÇÄ u u.2).order_mul h‚ÇÄ.meromorphicAt
    simp_rw [‚Üê h‚ÇÑg‚ÇÄ, hCon] at A
    simp at A
    let B := hOrder u (Finset.mem_insert_self u P)
    tauto

  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg, h‚ÇÑg‚ü© := h‚ÇÅg‚ÇÄ.decompose‚ÇÅ h‚ÇÖg‚ÇÄ h‚ÇÜg‚ÇÄ u.2
  use g
  ¬∑ constructor
    ¬∑ exact h‚ÇÅg
    ¬∑ constructor
      ¬∑ intro ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©
        simp
        simp at v‚ÇÇ
        rcases v‚ÇÇ with hv|hv
        ¬∑ rwa [hv]
        ¬∑ let A := h‚ÇÇg‚ÇÄ ‚ü®v‚ÇÅ, hv‚ü©
          rw [h‚ÇÑg] at A
          rw [mul_comm, ‚Üê analyticAt_of_mul_analytic] at A
          simp at A
          exact A
          --
          simp
          apply AnalyticAt.zpow
          fun_prop
          by_contra hCon
          rw [sub_eq_zero] at hCon

          have : v‚ÇÅ = u := by
            exact SetCoe.ext hCon
          rw [this] at hv
          tauto
          --
          apply zpow_ne_zero
          simp
          by_contra hCon
          rw [sub_eq_zero] at hCon
          have : v‚ÇÅ = u := by
            exact SetCoe.ext hCon
          rw [this] at hv
          tauto

      ¬∑ constructor
        ¬∑ intro ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©
          simp
          simp at v‚ÇÇ
          rcases v‚ÇÇ with hv|hv
          ¬∑ rwa [hv]
          ¬∑ by_contra hCon
            let A := h‚ÇÉg‚ÇÄ ‚ü®v‚ÇÅ,hv‚ü©
            rw [h‚ÇÑg] at A
            simp at A
            tauto
        ¬∑ conv =>
            left
            rw [h‚ÇÑg‚ÇÄ, h‚ÇÑg]
          simp
          rw [mul_assoc]
          congr
          rw [Finset.prod_insert]
          simp
          congr
          have : (hf u u.2).meromorphicAt.order = (h‚ÇÅg‚ÇÄ u u.2).order := by
            have h‚ÇÖg‚ÇÄ : f =·∂†[ùìù u.1] (g‚ÇÄ * ‚àè p : P, fun z => (z - p.1.1) ^ (hf.meromorphicOn.divisor p.1.1)) := by
              exact Eq.eventuallyEq h‚ÇÑg‚ÇÄ
            have h‚ÇÜg‚ÇÄ : f =·∂†[ùìù[‚â†] u.1] (g‚ÇÄ * ‚àè p : P, fun z => (z - p.1.1) ^ (hf.meromorphicOn.divisor p.1.1)) := by
              exact eventuallyEq_nhdsWithin_of_eqOn fun ‚¶Éx‚¶Ñ a => congrFun h‚ÇÑg‚ÇÄ x
            rw [(hf u u.2).meromorphicAt.order_congr h‚ÇÜg‚ÇÄ]
            let C := (h‚ÇÅg‚ÇÄ u u.2).order_mul h‚ÇÄ.meromorphicAt
            rw [C]
            let D := h‚ÇÄ.order_eq_zero_iff.2 h‚ÇÅ
            let E := h‚ÇÄ.meromorphicAt_order
            rw [E, D]
            simp
          have : hf.meromorphicOn.divisor u = h‚ÇÅg‚ÇÄ.divisor u := by
            unfold MeromorphicOn.divisor
            simp
            rw [this]
          rw [this]
          --
          simpa


theorem MeromorphicOn.decompose‚ÇÉ'
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅU : IsCompact U)
  (h‚ÇÇU : IsConnected U)
  (h‚ÇÅf : StronglyMeromorphicOn f U)
  (h‚ÇÇf : ‚àÉ u : U, f u ‚â† 0) :
  ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (MeromorphicOn g U)
    ‚àß (AnalyticOnNhd ‚ÑÇ g U)
    ‚àß (‚àÄ u : U, g u ‚â† 0)
    ‚àß (f = g * ‚àè·∂† u, fun z ‚Ü¶ (z - u) ^ (h‚ÇÅf.meromorphicOn.divisor u)) := by

  have h‚ÇÉf : ‚àÄ u : U, (h‚ÇÅf u u.2).meromorphicAt.order ‚â† ‚ä§ :=
    StronglyMeromorphicOn.order_ne_top h‚ÇÅf h‚ÇÇU h‚ÇÇf
  have h‚ÇÑf : Set.Finite (Function.support h‚ÇÅf.meromorphicOn.divisor) := h‚ÇÅf.meromorphicOn.divisor.finiteSupport h‚ÇÅU

  let d := - h‚ÇÅf.meromorphicOn.divisor.toFun
  have h‚ÇÅd : d.support = (Function.support h‚ÇÅf.meromorphicOn.divisor) := by
    ext x
    unfold d
    simp
  let h‚ÇÅ := ‚àè·∂† u, fun z ‚Ü¶ (z - u) ^ (d u)
  have h‚ÇÅh‚ÇÅ : StronglyMeromorphicOn h‚ÇÅ U := by
    intro z hz
    exact stronglyMeromorphicOn_ratlPolynomial‚ÇÉ d z trivial
  have h‚ÇÇh‚ÇÅ : h‚ÇÅh‚ÇÅ.meromorphicOn.divisor = d := by
    apply stronglyMeromorphicOn_divisor_ratlPolynomial_U
    rwa [h‚ÇÅd]
    --
    rw [h‚ÇÅd]
    exact (StronglyMeromorphicOn.meromorphicOn h‚ÇÅf).divisor.supportInU
  have h‚ÇÉh‚ÇÅ : ‚àÄ (z : ‚ÑÇ) (hz : z ‚àà U), (h‚ÇÅh‚ÇÅ z hz).meromorphicAt.order ‚â† ‚ä§ := by
    intro z hz
    apply stronglyMeromorphicOn_ratlPolynomial‚ÇÉorder
  have h‚ÇÑh‚ÇÅ : ‚àÄ (z : ‚ÑÇ) (hz : z ‚àà U), (h‚ÇÅh‚ÇÅ z hz).meromorphicAt.order = d z := by
    intro z hz
    rw [stronglyMeromorphicOn_divisor_ratlPolynomial‚ÇÅ]
    rwa [h‚ÇÅd]

  let g' := f * h‚ÇÅ
  have h‚ÇÅg' : MeromorphicOn g' U := h‚ÇÅf.meromorphicOn.mul h‚ÇÅh‚ÇÅ.meromorphicOn
  have h‚ÇÇg' : h‚ÇÅg'.divisor.toFun = 0 := by
    rw [MeromorphicOn.divisor_mul h‚ÇÅf.meromorphicOn (fun z hz ‚Ü¶ h‚ÇÉf ‚ü®z, hz‚ü©) h‚ÇÅh‚ÇÅ.meromorphicOn h‚ÇÉh‚ÇÅ]
    rw [h‚ÇÇh‚ÇÅ]
    unfold d
    simp
  have h‚ÇÉg' : ‚àÄ u : U, (h‚ÇÅg' u.1 u.2).order = 0 := by
    intro u
    rw [(h‚ÇÅf u.1 u.2).meromorphicAt.order_mul (h‚ÇÅh‚ÇÅ u.1 u.2).meromorphicAt]
    rw [h‚ÇÑh‚ÇÅ]
    unfold d
    unfold MeromorphicOn.divisor
    simp
    have : (h‚ÇÅf u.1 u.2).meromorphicAt.order = WithTop.untop' 0 (h‚ÇÅf u.1 u.2).meromorphicAt.order := by
      rw [eq_comm]
      let A := h‚ÇÉf u
      exact untop'_of_ne_top A
    rw [this]
    simp
    rw [‚Üê WithTop.LinearOrderedAddCommGroup.coe_neg]
    rw [‚Üê WithTop.coe_add]
    simp
    exact u.2

  let g := h‚ÇÅg'.makeStronglyMeromorphicOn
  have h‚ÇÅg : StronglyMeromorphicOn g U := stronglyMeromorphicOn_of_makeStronglyMeromorphicOn h‚ÇÅg'
  have h‚ÇÇg : h‚ÇÅg.meromorphicOn.divisor.toFun = 0 := by
    rw [‚Üê MeromorphicOn.divisor_of_makeStronglyMeromorphicOn]
    rw [h‚ÇÇg']
  have h‚ÇÉg : AnalyticOnNhd ‚ÑÇ g U := by
    apply StronglyMeromorphicOn.analyticOnNhd
    rw [h‚ÇÇg]
    simp
    assumption
  have h‚ÇÑg : ‚àÄ u : U, g u ‚â† 0 := by
    intro u
    rw [‚Üê (h‚ÇÅg u.1 u.2).order_eq_zero_iff]
    rw [makeStronglyMeromorphicOn_changeOrder]
    let A := h‚ÇÉg' u
    exact A
    exact u.2

  use g
  constructor
  ¬∑ exact StronglyMeromorphicOn.meromorphicOn h‚ÇÅg
  ¬∑ constructor
    ¬∑ exact h‚ÇÉg
    ¬∑ constructor
      ¬∑ exact h‚ÇÑg
      ¬∑ have t‚ÇÄ : StronglyMeromorphicOn (g * ‚àè·∂† (u : ‚ÑÇ), fun z => (z - u) ^ (h‚ÇÅf.meromorphicOn.divisor u)) U := by
          apply stronglyMeromorphicOn_of_mul_analytic' h‚ÇÉg h‚ÇÑg
          apply stronglyMeromorphicOn_ratlPolynomial‚ÇÉU

        funext z
        by_cases hz : z ‚àà U
        ¬∑ apply Filter.EventuallyEq.eq_of_nhds
          apply StronglyMeromorphicAt.localIdentity (h‚ÇÅf z hz) (t‚ÇÄ z hz)
          have h‚ÇÖg : g =·∂†[ùìù[‚â†] z] g' := makeStronglyMeromorphicOn_changeDiscrete h‚ÇÅg' hz
          have Y' : (g' * ‚àè·∂† (u : ‚ÑÇ), fun z => (z - u) ^ (h‚ÇÅf.meromorphicOn.divisor u)) =·∂†[ùìù[‚â†] z] g * ‚àè·∂† (u : ‚ÑÇ), fun z => (z - u) ^ (h‚ÇÅf.meromorphicOn.divisor u) := by
            apply Filter.EventuallyEq.symm
            exact Filter.EventuallyEq.mul h‚ÇÖg (by simp)
          apply Filter.EventuallyEq.trans _ Y'
          unfold g'
          unfold h‚ÇÅ

          let A := h‚ÇÅf.meromorphicOn.divisor.locallyFiniteInU z hz
          let B := eventually_nhdsWithin_iff.1 A
          obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt, h‚ÇÉt‚ü© := eventually_nhds_iff.1 B

          apply eventually_nhdsWithin_iff.2
          rw [eventually_nhds_iff]
          use t
          constructor
          ¬∑ intro y h‚ÇÅy h‚ÇÇy
            let C := h‚ÇÅt y h‚ÇÅy h‚ÇÇy
            rw [mul_assoc]
            simp
            have : (finprod (fun u z => (z - u) ^ d u) y * finprod (fun u z => (z - u) ^ (h‚ÇÅf.meromorphicOn.divisor u)) y) = 1 := by
              have t‚ÇÄ : (Function.mulSupport fun u z => (z - u) ^ d u).Finite := by
                rwa [ratlPoly_mulsupport, h‚ÇÅd]
              rw [finprod_eq_prod _ t‚ÇÄ]
              have t‚ÇÅ : (Function.mulSupport fun u z => (z - u) ^ h‚ÇÅf.meromorphicOn.divisor u).Finite := by
                rwa [ratlPoly_mulsupport]
              rw [finprod_eq_prod _ t‚ÇÅ]
              have : (Function.mulSupport fun u z => (z - u) ^ d u) = (Function.mulSupport fun u z => (z - u) ^ h‚ÇÅf.meromorphicOn.divisor u) := by
                rw [ratlPoly_mulsupport]
                rw [ratlPoly_mulsupport]
                unfold d
                simp
              have : t‚ÇÄ.toFinset = t‚ÇÅ.toFinset := by congr
              rw [this]
              simp
              rw [‚Üê Finset.prod_mul_distrib]
              apply Finset.prod_eq_one
              intro x hx
              apply zpow_neg_mul_zpow_self
              have : y ‚àâ t‚ÇÅ.toFinset := by
                simp
                simp at C
                rw [C]
                simp
                tauto
              by_contra H
              rw [sub_eq_zero] at H
              rw [H] at this
              tauto

            rw [this]
            simp
          ¬∑ exact ‚ü®h‚ÇÇt, h‚ÇÉt‚ü©
        ¬∑ simp
          have : g z = g' z := by
            unfold g
            unfold MeromorphicOn.makeStronglyMeromorphicOn
            simp [hz]
          rw [this]
          unfold g'
          unfold h‚ÇÅ
          simp
          rw [mul_assoc]
          nth_rw 1 [‚Üê mul_one (f z)]
          congr
          have t‚ÇÄ : (Function.mulSupport fun u z => (z - u) ^ d u).Finite := by
            rwa [ratlPoly_mulsupport, h‚ÇÅd]
          rw [finprod_eq_prod _ t‚ÇÄ]
          have t‚ÇÅ : (Function.mulSupport fun u z => (z - u) ^ h‚ÇÅf.meromorphicOn.divisor u).Finite := by
            rwa [ratlPoly_mulsupport]
          rw [finprod_eq_prod _ t‚ÇÅ]
          have : (Function.mulSupport fun u z => (z - u) ^ d u) = (Function.mulSupport fun u z => (z - u) ^ h‚ÇÅf.meromorphicOn.divisor u) := by
            rw [ratlPoly_mulsupport]
            rw [ratlPoly_mulsupport]
            unfold d
            simp
          have : t‚ÇÄ.toFinset = t‚ÇÅ.toFinset := by congr
          rw [this]
          simp
          rw [‚Üê Finset.prod_mul_distrib]
          rw [eq_comm]
          apply Finset.prod_eq_one
          intro x hx
          apply zpow_neg_mul_zpow_self

          have : z ‚àâ t‚ÇÅ.toFinset := by
            simp
            have : h‚ÇÅf.meromorphicOn.divisor z = 0 := by
              let A := h‚ÇÅf.meromorphicOn.divisor.supportInU
              simp at A
              by_contra H
              let B := A z H
              tauto
            rw [this]
            simp
            rfl
          by_contra H
          rw [sub_eq_zero] at H
          rw [H] at this
          tauto


theorem StronglyMeromorphicOn.decompose_log
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅU : IsCompact U)
  (h‚ÇÇU : IsConnected U)
  (h‚ÇÅf : StronglyMeromorphicOn f U)
  (h‚ÇÇf : ‚àÉ u : U, f u ‚â† 0) :
  ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (MeromorphicOn g U)
    ‚àß (AnalyticOnNhd ‚ÑÇ g U)
    ‚àß (‚àÄ u : U, g u ‚â† 0)
    ‚àß (fun z ‚Ü¶ log ‚Äñf z‚Äñ) =·∂†[Filter.codiscreteWithin U] fun z ‚Ü¶ log ‚Äñg z‚Äñ + ‚àë·∂† s, (h‚ÇÅf.meromorphicOn.divisor s) * log ‚Äñz - s‚Äñ := by

  have h‚ÇÉf : Set.Finite (Function.support h‚ÇÅf.meromorphicOn.divisor) := by
    exact Divisor.finiteSupport h‚ÇÅU (StronglyMeromorphicOn.meromorphicOn h‚ÇÅf).divisor

  have hSupp‚ÇÅ {z : ‚ÑÇ} : (fun s ‚Ü¶ (h‚ÇÅf.meromorphicOn.divisor s) * log ‚Äñz - s‚Äñ).support ‚äÜ h‚ÇÉf.toFinset := by
    intro x
    contrapose
    simp; tauto
  simp_rw [finsum_eq_sum_of_support_subset _ hSupp‚ÇÅ]

  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg, h‚ÇÑg‚ü© := MeromorphicOn.decompose‚ÇÉ' h‚ÇÅU h‚ÇÇU h‚ÇÅf h‚ÇÇf
  have hSupp‚ÇÇ {z : ‚ÑÇ} : ( fun (u : ‚ÑÇ) ‚Ü¶ (fun (z : ‚ÑÇ) ‚Ü¶ (z - u) ^ (h‚ÇÅf.meromorphicOn.divisor u)) ).mulSupport ‚äÜ h‚ÇÉf.toFinset := by
    intro x
    contrapose
    simp
    intro hx
    rw [hx]
    simp; tauto
  rw [finprod_eq_prod_of_mulSupport_subset _ hSupp‚ÇÇ] at h‚ÇÑg

  use g
  simp only [h‚ÇÅg, h‚ÇÇg, h‚ÇÉg, ne_eq, true_and, not_false_eq_true, implies_true]
  rw [Filter.eventuallyEq_iff_exists_mem]
  use {z | f z ‚â† 0}
  constructor
  ¬∑ have A := h‚ÇÅf.meromorphicOn.divisor.codiscreteWithin
    have : {z | f z ‚â† 0} ‚à© U = (Function.support h‚ÇÅf.meromorphicOn.divisor)·∂ú ‚à© U := by
      rw [‚Üê h‚ÇÅf.support_divisor h‚ÇÇf h‚ÇÇU]
      ext u
      simp; tauto

    rw [codiscreteWithin_congr_inter this]
    exact A

  ¬∑ intro z hz
    nth_rw 1 [h‚ÇÑg]
    simp
    rw [log_mul, log_prod]
    congr
    ext u
    rw [log_zpow]
    --
    intro x hx
    simp at hx
    have h‚ÇÅx : x ‚àà U := by
      exact h‚ÇÅf.meromorphicOn.divisor.supportInU hx

    apply zpow_ne_zero
    simp

    by_contra hCon
    rw [‚Üê hCon] at hx
    unfold MeromorphicOn.divisor at hx
    rw [hCon] at hz
    simp at hz
    let A := (h‚ÇÅf x h‚ÇÅx).order_eq_zero_iff
    let B := A.2 hz
    simp [B] at hx
    obtain ‚ü®a, b‚ü© := hx
    let c := b.1
    simp_rw [hCon] at c
    tauto
    --
    simp at hz
    by_contra hCon
    simp at hCon
    rw [h‚ÇÑg] at hz
    simp at hz
    tauto
    --
    rw [Finset.prod_ne_zero_iff]
    intro x hx
    simp at hx
    have h‚ÇÅx : x ‚àà U := by
      exact h‚ÇÅf.meromorphicOn.divisor.supportInU hx

    apply zpow_ne_zero
    simp

    by_contra hCon
    rw [‚Üê hCon] at hx
    unfold MeromorphicOn.divisor at hx
    rw [hCon] at hz
    simp at hz
    let A := (h‚ÇÅf x h‚ÇÅx).order_eq_zero_iff
    let B := A.2 hz
    simp [B] at hx
    obtain ‚ü®a, b‚ü© := hx
    let c := b.1
    simp_rw [hCon] at c
    tauto

  exact 0


theorem MeromorphicOn.decompose_log
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅU : IsCompact U)
  (h‚ÇÇU : IsConnected U)
  (h‚ÇÉU : interior U ‚â† ‚àÖ)
  (h‚ÇÅf : MeromorphicOn f U)
  (h‚ÇÇf : ‚àÉ u : U, (h‚ÇÅf u u.2).order ‚â† ‚ä§) :
  ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (AnalyticOnNhd ‚ÑÇ g U)
    ‚àß (‚àÄ u : U, g u ‚â† 0)
    ‚àß (fun z ‚Ü¶ log ‚Äñf z‚Äñ) =·∂†[Filter.codiscreteWithin U] fun z ‚Ü¶ log ‚Äñg z‚Äñ + ‚àë·∂† s, (h‚ÇÅf.divisor s) * log ‚Äñz - s‚Äñ := by

  let F := h‚ÇÅf.makeStronglyMeromorphicOn
  have h‚ÇÅF := stronglyMeromorphicOn_of_makeStronglyMeromorphicOn h‚ÇÅf
  have h‚ÇÇF : ‚àÉ u : U, (h‚ÇÅF.meromorphicOn u u.2).order ‚â† ‚ä§ := by
    obtain ‚ü®u, hu‚ü© := h‚ÇÇf
    use u
    rw [makeStronglyMeromorphicOn_changeOrder h‚ÇÅf u.2]
    assumption

  have t‚ÇÅ : ‚àÉ u : U, F u ‚â† 0 := by
    let A := h‚ÇÅF.meromorphicOn.nonvanish_of_order_ne_top h‚ÇÇF h‚ÇÇU h‚ÇÉU
    tauto
  have t‚ÇÉ : (fun z ‚Ü¶ log ‚Äñf z‚Äñ) =·∂†[Filter.codiscreteWithin U] (fun z ‚Ü¶ log ‚ÄñF z‚Äñ) := by
    -- This would be interesting for a tactic
    rw [eventuallyEq_iff_exists_mem]
    obtain ‚ü®s, h‚ÇÅs, h‚ÇÇs‚ü© := eventuallyEq_iff_exists_mem.1 (makeStronglyMeromorphicOn_changeDiscrete'' h‚ÇÅf)
    use s
    tauto

  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg, h‚ÇÑg‚ü© := h‚ÇÅF.decompose_log h‚ÇÅU h‚ÇÇU t‚ÇÅ
  use g
  constructor
  ¬∑ exact h‚ÇÇg
  ¬∑ constructor
    ¬∑ exact h‚ÇÉg
    ¬∑ apply t‚ÇÉ.trans
      rw [h‚ÇÅf.divisor_of_makeStronglyMeromorphicOn]
      exact h‚ÇÑg
