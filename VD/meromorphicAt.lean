import Mathlib.Analysis.Meromorphic.Order
import VD.ToMathlib.analyticAt
import VD.divisor

open scoped Interval Topology
open Real Filter MeasureTheory intervalIntegral

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f g : ùïú ‚Üí ùïú} {z‚ÇÄ : ùïú}


/-- The order multiplies by `n` when taking an analytic function to its `n`th power -/

theorem MeromorphicAt.order_pow (hf : MeromorphicAt f z‚ÇÄ) {n : ‚Ñï} :
    (hf.pow n).order = n * hf.order := by
  induction' n with n hn
  ¬∑ simp
    rw [‚Üê WithTop.coe_zero, MeromorphicAt.order_eq_int_iff]
    use 1, analyticAt_const
    simp
  ¬∑ simp [add_mul, pow_add, (hf.pow n).order_mul hf, hn]
    -- Really want rdistrib here
    cases hf.order
    ¬∑ simp
      rfl
    ¬∑ norm_cast
      simp
      ring

-- TODO: `order_zpow`

-- TODO: `order_inv`


theorem MeromorphicAt.order_ne_top_iff {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z‚ÇÄ : ‚ÑÇ} (hf : MeromorphicAt f z‚ÇÄ) :
    hf.order ‚â† ‚ä§ ‚Üî ‚àÉ (g : ‚ÑÇ ‚Üí ‚ÑÇ), AnalyticAt ‚ÑÇ g z‚ÇÄ ‚àß g z‚ÇÄ ‚â† 0 ‚àß f =·∂†[ùìù[‚â†] z‚ÇÄ] fun z ‚Ü¶ (z - z‚ÇÄ) ^ (hf.order.untop' 0) ‚Ä¢ g z :=
  ‚ü®fun h ‚Ü¶ (hf.order_eq_int_iff (hf.order.untop' 0)).1 (untop'_of_ne_top h).symm,
    fun h ‚Ü¶ Option.ne_none_iff_exists'.2 ‚ü®hf.order.untop' 0, (hf.order_eq_int_iff (hf.order.untop' 0)).2 h‚ü©‚ü©

/-
theorem MeromorphicAt.order_ne_top_iff' {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z‚ÇÄ : ‚ÑÇ} (hf : MeromorphicAt f z‚ÇÄ) :
    hf.order ‚â† ‚ä§ ‚Üî f * f‚Åª¬π =·∂†[ùìù[‚â†] z‚ÇÄ] 1 := by

  sorry
-/

theorem meromorphicAt_congr
  {ùïú : Type u_1} [NontriviallyNormedField ùïú]
  {E : Type u_2} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f : ùïú ‚Üí E} {g : ùïú ‚Üí E} {x : ùïú}
  (h : f =·∂†[ùìù[‚â†] x] g) : MeromorphicAt f x ‚Üî MeromorphicAt g x :=
  ‚ü®fun hf ‚Ü¶ hf.congr h, fun hg ‚Ü¶ hg.congr h.symm‚ü©


theorem meromorphicAt_congr'
  {ùïú : Type u_1} [NontriviallyNormedField ùïú]
  {E : Type u_2} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f : ùïú ‚Üí E} {g : ùïú ‚Üí E} {x : ùïú}
  (h : f =·∂†[nhds x] g) : MeromorphicAt f x ‚Üî MeromorphicAt g x :=
  meromorphicAt_congr (Filter.EventuallyEq.filter_mono h nhdsWithin_le_nhds)


theorem MeromorphicAt.order_congr
  {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf‚ÇÅ : MeromorphicAt f‚ÇÅ z‚ÇÄ)
  (h : f‚ÇÅ =·∂†[ùìù[‚â†] z‚ÇÄ] f‚ÇÇ):
  hf‚ÇÅ.order = (hf‚ÇÅ.congr h).order := by
  by_cases hord : hf‚ÇÅ.order = ‚ä§
  ¬∑ rw [hord, eq_comm]
    rw [hf‚ÇÅ.order_eq_top_iff] at hord
    rw [(hf‚ÇÅ.congr h).order_eq_top_iff]
    exact EventuallyEq.rw hord (fun x => Eq (f‚ÇÇ x)) (_root_.id (EventuallyEq.symm h))
  ¬∑ obtain ‚ü®n, hn : hf‚ÇÅ.order = n‚ü© := Option.ne_none_iff_exists'.mp hord
    obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (hf‚ÇÅ.order_eq_int_iff n).1 hn
    rw [hn, eq_comm, (hf‚ÇÅ.congr h).order_eq_int_iff]
    use g, h‚ÇÅg, h‚ÇÇg
    exact EventuallyEq.rw h‚ÇÉg (fun x => Eq (f‚ÇÇ x)) (_root_.id (EventuallyEq.symm h))

theorem MeromorphicAt.order_inv
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : MeromorphicAt f z‚ÇÄ) :
  hf.order = -hf.inv.order := by

  by_cases h‚ÇÇf : hf.order = ‚ä§
  ¬∑ rw [h‚ÇÇf, ‚Üê LinearOrderedAddCommGroupWithTop.neg_top, neg_eq_iff_eq_neg, neg_neg, eq_comm]
    rw [MeromorphicAt.order_eq_top_iff] at *
    filter_upwards [h‚ÇÇf]
    simp

  ¬∑ have : hf.order = hf.order.untop' 0 := by
      simp [h‚ÇÇf, untop'_of_ne_top]
    rw [this]
    rw [eq_comm]
    rw [neg_eq_iff_eq_neg]
    apply (hf.inv.order_eq_int_iff (-hf.order.untop' 0)).2
    rw [hf.order_eq_int_iff] at this
    obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := this
    use g‚Åª¬π, h‚ÇÅg.inv h‚ÇÇg
    constructor
    ¬∑ simp [h‚ÇÇg]
    ¬∑ rw [eventually_nhdsWithin_iff]
      rw [eventually_nhds_iff]
      rw [eventually_nhdsWithin_iff] at h‚ÇÉg
      rw [eventually_nhds_iff] at h‚ÇÉg
      obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt, h‚ÇÉt‚ü© := h‚ÇÉg
      use t
      constructor
      ¬∑ intro y h‚ÇÅy h‚ÇÇy
        simp
        let A := h‚ÇÅt y h‚ÇÅy h‚ÇÇy
        rw [A]
        simp
        rw [mul_comm]
      ¬∑ exact ‚ü®h‚ÇÇt, h‚ÇÉt‚ü©


theorem AnalyticAt.meromorphicAt_order_nonneg
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : AnalyticAt ‚ÑÇ f z‚ÇÄ) :
  0 ‚â§ hf.meromorphicAt.order := by
  rw [hf.meromorphicAt_order]
  rw [(by rfl : (0 : WithTop ‚Ñ§) = WithTop.map Nat.cast (0 : ‚Ñï‚àû))]
  erw [WithTop.map_le_iff]
  simp; simp


theorem MeromorphicAt.order_add
  {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf‚ÇÅ : MeromorphicAt f‚ÇÅ z‚ÇÄ)
  (hf‚ÇÇ : MeromorphicAt f‚ÇÇ z‚ÇÄ) :
  min hf‚ÇÅ.order hf‚ÇÇ.order ‚â§ (hf‚ÇÅ.add hf‚ÇÇ).order := by

  -- Handle the trivial cases where one of the orders equals ‚ä§
  by_cases h‚ÇÇf‚ÇÅ: hf‚ÇÅ.order = ‚ä§
  ¬∑ rw [h‚ÇÇf‚ÇÅ]; simp
    rw [hf‚ÇÅ.order_eq_top_iff] at h‚ÇÇf‚ÇÅ
    have h : f‚ÇÅ + f‚ÇÇ =·∂†[ùìù[‚â†] z‚ÇÄ] f‚ÇÇ := by
      -- Optimize this, here an elsewhere
      rw [eventuallyEq_nhdsWithin_iff, eventually_iff_exists_mem]
      rw [eventually_nhdsWithin_iff, eventually_iff_exists_mem] at h‚ÇÇf‚ÇÅ
      obtain ‚ü®v, hv‚ü© := h‚ÇÇf‚ÇÅ
      use v; simp; trivial
    rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr h]
  by_cases h‚ÇÇf‚ÇÇ: hf‚ÇÇ.order = ‚ä§
  ¬∑ rw [h‚ÇÇf‚ÇÇ]; simp
    rw [hf‚ÇÇ.order_eq_top_iff] at h‚ÇÇf‚ÇÇ
    have h : f‚ÇÅ + f‚ÇÇ =·∂†[ùìù[‚â†] z‚ÇÄ] f‚ÇÅ := by
      rw [eventuallyEq_nhdsWithin_iff, eventually_iff_exists_mem]
      rw [eventually_nhdsWithin_iff, eventually_iff_exists_mem] at h‚ÇÇf‚ÇÇ
      obtain ‚ü®v, hv‚ü© := h‚ÇÇf‚ÇÇ
      use v; simp; trivial
    rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr h]

  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := hf‚ÇÅ.order_ne_top_iff.1 h‚ÇÇf‚ÇÅ
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := hf‚ÇÇ.order_ne_top_iff.1 h‚ÇÇf‚ÇÇ

  let n‚ÇÅ := WithTop.untop' 0 hf‚ÇÅ.order
  let n‚ÇÇ := WithTop.untop' 0 hf‚ÇÇ.order
  let n := min n‚ÇÅ n‚ÇÇ
  have h‚ÇÅn‚ÇÅ : 0 ‚â§ n‚ÇÅ - n := by
    rw [sub_nonneg]
    exact Int.min_le_left n‚ÇÅ n‚ÇÇ
  have h‚ÇÅn‚ÇÇ : 0 ‚â§ n‚ÇÇ - n := by
    rw [sub_nonneg]
    exact Int.min_le_right n‚ÇÅ n‚ÇÇ

  let g := (fun z ‚Ü¶ (z - z‚ÇÄ) ^ (n‚ÇÅ - n)) * g‚ÇÅ +  (fun z ‚Ü¶ (z - z‚ÇÄ) ^ (n‚ÇÇ - n)) * g‚ÇÇ
  have h‚ÇÅg : AnalyticAt ‚ÑÇ g z‚ÇÄ := by
    apply AnalyticAt.add
    apply AnalyticAt.mul (AnalyticAt.zpow_nonneg (by fun_prop) h‚ÇÅn‚ÇÅ) h‚ÇÅg‚ÇÅ
    apply AnalyticAt.mul (AnalyticAt.zpow_nonneg (by fun_prop) h‚ÇÅn‚ÇÇ) h‚ÇÅg‚ÇÇ
  have h‚ÇÇg : 0 ‚â§ h‚ÇÅg.meromorphicAt.order := h‚ÇÅg.meromorphicAt_order_nonneg

  have : f‚ÇÅ + f‚ÇÇ =·∂†[ùìù[‚â†] z‚ÇÄ] (fun z ‚Ü¶ (z - z‚ÇÄ) ^ n) * g := by
    rw [eventuallyEq_nhdsWithin_iff, eventually_nhds_iff]
    obtain ‚ü®t, ht‚ü© := eventually_nhds_iff.1 (eventually_nhdsWithin_iff.1 (h‚ÇÉg‚ÇÅ.and h‚ÇÉg‚ÇÇ))
    use t
    simp [ht]
    intro y h‚ÇÅy h‚ÇÇy
    rw [(ht.1 y h‚ÇÅy h‚ÇÇy).1, (ht.1 y h‚ÇÅy h‚ÇÇy).2]
    unfold g; simp; rw [mul_add]
    repeat rw [‚Üêmul_assoc, ‚Üê zpow_add' (by left; exact (sub_ne_zero_of_ne h‚ÇÇy))]
    simp [n‚ÇÅ, n‚ÇÇ]

  rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr this]

  have t‚ÇÄ : MeromorphicAt (fun z ‚Ü¶ (z - z‚ÇÄ) ^ n) z‚ÇÄ := by fun_prop
  rw [t‚ÇÄ.order_mul h‚ÇÅg.meromorphicAt]
  have t‚ÇÅ : t‚ÇÄ.order = n := by
    rw [t‚ÇÄ.order_eq_int_iff]
    use 1
    constructor
    ¬∑ apply analyticAt_const
    ¬∑ simp
  rw [t‚ÇÅ]
  unfold n n‚ÇÅ n‚ÇÇ
  have : hf‚ÇÅ.order ‚äì hf‚ÇÇ.order = (WithTop.untop' 0 hf‚ÇÅ.order ‚äì WithTop.untop' 0 hf‚ÇÇ.order) := by
    rw [‚Üêuntop'_of_ne_top (d := 0) h‚ÇÇf‚ÇÅ, ‚Üêuntop'_of_ne_top (d := 0) h‚ÇÇf‚ÇÇ]
    simp
  rw [this]
  exact le_add_of_nonneg_right h‚ÇÇg


theorem MeromorphicAt.order_add_of_ne_orders
  {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf‚ÇÅ : MeromorphicAt f‚ÇÅ z‚ÇÄ)
  (hf‚ÇÇ : MeromorphicAt f‚ÇÇ z‚ÇÄ)
  (hf‚ÇÅ‚ÇÇ : hf‚ÇÅ.order ‚â† hf‚ÇÇ.order) :
  min hf‚ÇÅ.order hf‚ÇÇ.order = (hf‚ÇÅ.add hf‚ÇÇ).order := by

  -- Handle the trivial cases where one of the orders equals ‚ä§
  by_cases h‚ÇÇf‚ÇÅ: hf‚ÇÅ.order = ‚ä§
  ¬∑ rw [h‚ÇÇf‚ÇÅ]; simp
    rw [hf‚ÇÅ.order_eq_top_iff] at h‚ÇÇf‚ÇÅ
    have h : f‚ÇÅ + f‚ÇÇ =·∂†[ùìù[‚â†] z‚ÇÄ] f‚ÇÇ := by
      -- Optimize this, here and elsewhere
      rw [eventuallyEq_nhdsWithin_iff, eventually_iff_exists_mem]
      rw [eventually_nhdsWithin_iff, eventually_iff_exists_mem] at h‚ÇÇf‚ÇÅ
      obtain ‚ü®v, hv‚ü© := h‚ÇÇf‚ÇÅ
      use v
      simpa
    rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr h]
  by_cases h‚ÇÇf‚ÇÇ: hf‚ÇÇ.order = ‚ä§
  ¬∑ rw [h‚ÇÇf‚ÇÇ]; simp
    rw [hf‚ÇÇ.order_eq_top_iff] at h‚ÇÇf‚ÇÇ
    have h : f‚ÇÅ + f‚ÇÇ =·∂†[ùìù[‚â†] z‚ÇÄ] f‚ÇÅ := by
      rw [eventuallyEq_nhdsWithin_iff, eventually_iff_exists_mem]
      rw [eventually_nhdsWithin_iff, eventually_iff_exists_mem] at h‚ÇÇf‚ÇÇ
      obtain ‚ü®v, hv‚ü© := h‚ÇÇf‚ÇÇ
      use v; simp; trivial
    rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr h]

  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := hf‚ÇÅ.order_ne_top_iff.1 h‚ÇÇf‚ÇÅ
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := hf‚ÇÇ.order_ne_top_iff.1 h‚ÇÇf‚ÇÇ

  let n‚ÇÅ := WithTop.untop' 0 hf‚ÇÅ.order
  let n‚ÇÇ := WithTop.untop' 0 hf‚ÇÇ.order
  have hn‚ÇÅ‚ÇÇ : n‚ÇÅ ‚â† n‚ÇÇ := by
    unfold n‚ÇÅ n‚ÇÇ
    simp [WithTop.untop'_eq_untop'_iff]
    tauto

  let n := min n‚ÇÅ n‚ÇÇ
  have h‚ÇÅn‚ÇÅ : 0 ‚â§ n‚ÇÅ - n := by
    rw [sub_nonneg]
    exact Int.min_le_left n‚ÇÅ n‚ÇÇ
  have h‚ÇÅn‚ÇÇ : 0 ‚â§ n‚ÇÇ - n := by
    rw [sub_nonneg]
    exact Int.min_le_right n‚ÇÅ n‚ÇÇ

  let g := (fun z ‚Ü¶ (z - z‚ÇÄ) ^ (n‚ÇÅ - n)) * g‚ÇÅ +  (fun z ‚Ü¶ (z - z‚ÇÄ) ^ (n‚ÇÇ - n)) * g‚ÇÇ
  have h‚ÇÅg : AnalyticAt ‚ÑÇ g z‚ÇÄ := by
    apply AnalyticAt.add
    apply (AnalyticAt.zpow_nonneg (by fun_prop) h‚ÇÅn‚ÇÅ).mul h‚ÇÅg‚ÇÅ
    apply (AnalyticAt.zpow_nonneg (by fun_prop) h‚ÇÅn‚ÇÇ).mul h‚ÇÅg‚ÇÇ
  have h‚ÇÇg : 0 ‚â§ h‚ÇÅg.meromorphicAt.order := h‚ÇÅg.meromorphicAt_order_nonneg
  have h‚ÇÇ'g : g z‚ÇÄ ‚â† 0 := by
    unfold g
    simp
    have : n = n‚ÇÅ ‚à® n = n‚ÇÇ := by
      unfold n
      simp
      by_cases h : n‚ÇÅ ‚â§ n‚ÇÇ
      ¬∑ left; assumption
      ¬∑ right
        simp at h
        exact h.le
    rcases this with h|h
    ¬∑ rw [h]
      have : n‚ÇÇ - n‚ÇÅ ‚â† 0 := by
        rw [sub_ne_zero, ne_comm]
        apply hn‚ÇÅ‚ÇÇ
      have : (0 : ‚ÑÇ) ^ (n‚ÇÇ - n‚ÇÅ) = 0 := by
        rwa [zpow_eq_zero_iff]
      simp [this]
      exact h‚ÇÇg‚ÇÅ
    ¬∑ rw [h]
      have : n‚ÇÅ - n‚ÇÇ ‚â† 0 := by
        rw [sub_ne_zero]
        apply hn‚ÇÅ‚ÇÇ
      have : (0 : ‚ÑÇ) ^ (n‚ÇÅ - n‚ÇÇ) = 0 := by
        rwa [zpow_eq_zero_iff]
      simp [this]
      exact h‚ÇÇg‚ÇÇ
  have h‚ÇÉg : h‚ÇÅg.meromorphicAt.order = 0 := by
    let A := h‚ÇÅg.meromorphicAt_order
    let B := h‚ÇÅg.order_eq_zero_iff.2 h‚ÇÇ'g
    rw [B] at A
    simpa

  have : f‚ÇÅ + f‚ÇÇ =·∂†[ùìù[‚â†] z‚ÇÄ] (fun z ‚Ü¶ (z - z‚ÇÄ) ^ n) * g := by
    rw [eventuallyEq_nhdsWithin_iff, eventually_nhds_iff]
    obtain ‚ü®t, ht‚ü© := eventually_nhds_iff.1 (eventually_nhdsWithin_iff.1 (h‚ÇÉg‚ÇÅ.and h‚ÇÉg‚ÇÇ))
    use t
    simp [ht]
    intro y h‚ÇÅy h‚ÇÇy
    rw [(ht.1 y h‚ÇÅy h‚ÇÇy).1, (ht.1 y h‚ÇÅy h‚ÇÇy).2]
    unfold g; simp; rw [mul_add]
    repeat rw [‚Üêmul_assoc, ‚Üê zpow_add' (by left; exact (sub_ne_zero_of_ne h‚ÇÇy))]
    simp [n‚ÇÅ, n‚ÇÇ]

  rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr this]

  have t‚ÇÄ : MeromorphicAt (fun z ‚Ü¶ (z - z‚ÇÄ) ^ n) z‚ÇÄ := by fun_prop
  rw [t‚ÇÄ.order_mul h‚ÇÅg.meromorphicAt]
  have t‚ÇÅ : t‚ÇÄ.order = n := by
    rw [t‚ÇÄ.order_eq_int_iff]
    use 1, analyticAt_const
    simp
  rw [t‚ÇÅ]
  unfold n n‚ÇÅ n‚ÇÇ
  have : hf‚ÇÅ.order ‚äì hf‚ÇÇ.order = (WithTop.untop' 0 hf‚ÇÅ.order ‚äì WithTop.untop' 0 hf‚ÇÇ.order) := by
    rw [‚Üê untop'_of_ne_top (d := 0) h‚ÇÇf‚ÇÅ, ‚Üê untop'_of_ne_top (d := 0) h‚ÇÇf‚ÇÇ]
    simp
  rw [this, h‚ÇÉg]
  simp

-- Might want to think about adding an analytic function instead of a constant
theorem MeromorphicAt.order_add_const
  --have {z : ‚ÑÇ} : 0 < (hf z trivial).order ‚Üí (hf z trivial).order = ((hf.add (MeromorphicOn.const a)) z trivial).order:= by
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z a : ‚ÑÇ}
  (hf : MeromorphicAt f z) :
  hf.order < 0 ‚Üí hf.order = (hf.add (MeromorphicAt.const a z)).order := by
  intro h

  by_cases ha: a = 0
  ¬∑ -- might want theorem MeromorphicAt.order_const
    have : (MeromorphicAt.const a z).order = ‚ä§ := by
      rw [MeromorphicAt.order_eq_top_iff]
      rw [ha]
      simp
    rw [‚Üê hf.order_add_of_ne_orders (MeromorphicAt.const a z)]
    rw [this]
    simp
    rw [this]
    exact h.ne_top
  ¬∑ have : (MeromorphicAt.const a z).order = (0 : ‚Ñ§) := by
      rw [MeromorphicAt.order_eq_int_iff]
      use fun _ ‚Ü¶ a
      exact ‚ü®analyticAt_const, by simpa‚ü©
    rw [‚Üê hf.order_add_of_ne_orders (MeromorphicAt.const a z)]
    rw [this]
    simp [h.le]
    rw [this]
    exact h.ne


-- might want theorem MeromorphicAt.order_zpow
