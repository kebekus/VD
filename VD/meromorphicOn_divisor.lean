import VD.divisor
import VD.meromorphicOn


open scoped Interval Topology
open Real Filter MeasureTheory intervalIntegral


noncomputable def MeromorphicOn.divisor
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (hf : MeromorphicOn f U) :
  Divisor U where

  toFun := by
    intro z
    if hz : z ‚àà U then
      exact ((hf z hz).order.untop' 0 : ‚Ñ§)
    else
      exact 0

  supportInU := by
    intro z hz
    simp at hz
    by_contra h‚ÇÇz
    simp [h‚ÇÇz] at hz

  locallyFiniteInU := by
    intro z hz

    apply eventually_nhdsWithin_iff.2
    rw [eventually_nhds_iff]

    rcases MeromorphicAt.eventually_eq_zero_or_eventually_ne_zero (hf z hz) with h|h
    ¬∑ rw [eventually_nhdsWithin_iff] at h
      rw [eventually_nhds_iff] at h
      obtain ‚ü®N, h‚ÇÅN, h‚ÇÇN, h‚ÇÉN‚ü© := h
      use N
      constructor
      ¬∑ intro y h‚ÇÅy h‚ÇÇy
        by_cases h‚ÇÉy : y ‚àà U
        ¬∑ simp [h‚ÇÉy]
          right
          rw [MeromorphicAt.order_eq_top_iff (hf y h‚ÇÉy)]
          rw [eventually_nhdsWithin_iff]
          rw [eventually_nhds_iff]
          use N ‚à© {z}·∂ú
          constructor
          ¬∑ intro x h‚ÇÅx _
            exact h‚ÇÅN x h‚ÇÅx.1 h‚ÇÅx.2
          ¬∑ constructor
            ¬∑ exact IsOpen.inter h‚ÇÇN isOpen_compl_singleton
            ¬∑ exact Set.mem_inter h‚ÇÅy h‚ÇÇy
        ¬∑ simp [h‚ÇÉy]
      ¬∑ tauto

    ¬∑ let A := (hf z hz).eventually_analyticAt
      let B := Filter.eventually_and.2 ‚ü®h, A‚ü©
      rw [eventually_nhdsWithin_iff, eventually_nhds_iff] at B
      obtain ‚ü®N, h‚ÇÅN, h‚ÇÇN, h‚ÇÉN‚ü© := B
      use N
      constructor
      ¬∑ intro y h‚ÇÅy h‚ÇÇy
        by_cases h‚ÇÉy : y ‚àà U
        ¬∑ simp [h‚ÇÉy]
          left
          rw [(h‚ÇÅN y h‚ÇÅy h‚ÇÇy).2.meromorphicAt_order]
          let D := (h‚ÇÅN y h‚ÇÅy h‚ÇÇy).2.order_eq_zero_iff.2
          let C := (h‚ÇÅN y h‚ÇÅy h‚ÇÇy).1
          let E := D C
          rw [E]
          simp
        ¬∑ simp [h‚ÇÉy]
      ¬∑ tauto


theorem MeromorphicOn.divisor_def‚ÇÅ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z : ‚ÑÇ}
  (hf : MeromorphicOn f U)
  (hz : z ‚àà U) :
  hf.divisor z = ((hf z hz).order.untop' 0 : ‚Ñ§) := by
  unfold MeromorphicOn.divisor
  simp [hz]


theorem MeromorphicOn.divisor_def‚ÇÇ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z : ‚ÑÇ}
  (hf : MeromorphicOn f U)
  (hz : z ‚àà U)
  (h‚ÇÇf : (hf z hz).order ‚â† ‚ä§) :
  hf.divisor z = (hf z hz).order.untop h‚ÇÇf := by
  unfold MeromorphicOn.divisor
  simp [hz]
  rw [WithTop.untop'_eq_iff]
  left
  exact Eq.symm (WithTop.coe_untop (hf z hz).order h‚ÇÇf)


theorem MeromorphicOn.divisor_mul‚ÇÄ
  {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z : ‚ÑÇ}
  (hz : z ‚àà U)
  (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ U)
  (h‚ÇÇf‚ÇÅ : (h‚ÇÅf‚ÇÅ z hz).order ‚â† ‚ä§)
  (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ U)
  (h‚ÇÇf‚ÇÇ : (h‚ÇÅf‚ÇÇ z hz).order ‚â† ‚ä§) :
  (h‚ÇÅf‚ÇÅ.mul h‚ÇÅf‚ÇÇ).divisor.toFun z = h‚ÇÅf‚ÇÅ.divisor.toFun z + h‚ÇÅf‚ÇÇ.divisor.toFun z := by
  by_cases h‚ÇÅz : z ‚àà U
  ¬∑ rw [MeromorphicOn.divisor_def‚ÇÇ h‚ÇÅf‚ÇÅ hz h‚ÇÇf‚ÇÅ]
    rw [MeromorphicOn.divisor_def‚ÇÇ h‚ÇÅf‚ÇÇ hz h‚ÇÇf‚ÇÇ]
    have B : ((h‚ÇÅf‚ÇÅ.mul h‚ÇÅf‚ÇÇ) z hz).order ‚â† ‚ä§ := by
      rw [MeromorphicAt.order_mul (h‚ÇÅf‚ÇÅ z hz) (h‚ÇÅf‚ÇÇ z hz)]
      simp; tauto
    rw [MeromorphicOn.divisor_def‚ÇÇ (h‚ÇÅf‚ÇÅ.mul h‚ÇÅf‚ÇÇ) hz B]
    simp_rw [MeromorphicAt.order_mul (h‚ÇÅf‚ÇÅ z hz) (h‚ÇÅf‚ÇÇ z hz)]
    rw [untop_add]
  ¬∑ unfold MeromorphicOn.divisor
    simp [h‚ÇÅz]


theorem MeromorphicOn.divisor_mul
  {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ U)
  (h‚ÇÇf‚ÇÅ : ‚àÄ z, (hz : z ‚àà U) ‚Üí (h‚ÇÅf‚ÇÅ z hz).order ‚â† ‚ä§)
  (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ U)
  (h‚ÇÇf‚ÇÇ : ‚àÄ z, (hz : z ‚àà U) ‚Üí (h‚ÇÅf‚ÇÇ z hz).order ‚â† ‚ä§) :
  (h‚ÇÅf‚ÇÅ.mul h‚ÇÅf‚ÇÇ).divisor.toFun = h‚ÇÅf‚ÇÅ.divisor.toFun + h‚ÇÅf‚ÇÇ.divisor.toFun := by
  funext z
  by_cases hz : z ‚àà U
  ¬∑ rw [MeromorphicOn.divisor_mul‚ÇÄ hz h‚ÇÅf‚ÇÅ (h‚ÇÇf‚ÇÅ z hz) h‚ÇÅf‚ÇÇ (h‚ÇÇf‚ÇÇ z hz)]
    simp
  ¬∑ simp
    rw [Function.nmem_support.mp (fun a => hz (h‚ÇÅf‚ÇÅ.divisor.supportInU a))]
    rw [Function.nmem_support.mp (fun a => hz (h‚ÇÅf‚ÇÇ.divisor.supportInU a))]
    rw [Function.nmem_support.mp (fun a => hz ((h‚ÇÅf‚ÇÅ.mul h‚ÇÅf‚ÇÇ).divisor.supportInU a))]
    simp


theorem MeromorphicOn.divisor_inv
  {f: ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅf : MeromorphicOn f U) :
  h‚ÇÅf.inv.divisor.toFun = -h‚ÇÅf.divisor.toFun := by
  funext z

  by_cases hz : z ‚àà U
  ¬∑ rw [MeromorphicOn.divisor_def‚ÇÅ]
    simp
    rw [MeromorphicOn.divisor_def‚ÇÅ]
    rw [MeromorphicAt.order_inv]
    simp
    by_cases h‚ÇÇf : (h‚ÇÅf z hz).order = ‚ä§
    ¬∑ simp [h‚ÇÇf]
    ¬∑ let A := untop'_of_ne_top (d := 0) h‚ÇÇf
      rw [‚Üê A]
      exact rfl
    repeat exact hz
  ¬∑ unfold MeromorphicOn.divisor
    simp [hz]


theorem MeromorphicOn.divisor_add_const‚ÇÅ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z : ‚ÑÇ}
  (hf : MeromorphicOn f U)
  (a : ‚ÑÇ) :
  0 ‚â§ hf.divisor z ‚Üí 0 ‚â§ (hf.add (MeromorphicOn.const a)).divisor z := by
  intro h

  unfold MeromorphicOn.divisor

  -- Trivial case: z ‚àâ U
  by_cases hz : z ‚àâ U
  ¬∑ simp [hz]

  -- Non-trivial case: z ‚àà U
  simp at hz; simp [hz]

  by_cases h‚ÇÅf : (hf z hz).order = ‚ä§
  ¬∑ have : f + (fun z ‚Ü¶ a) =·∂†[ùìù[‚â†] z] (fun z ‚Ü¶ a) := by
      rw [MeromorphicAt.order_eq_top_iff] at h‚ÇÅf
      rw [eventually_nhdsWithin_iff] at h‚ÇÅf
      rw [eventually_nhds_iff] at h‚ÇÅf
      obtain ‚ü®t, ht‚ü© := h‚ÇÅf
      rw [eventuallyEq_nhdsWithin_iff]
      rw [eventually_nhds_iff]
      use t
      simp [ht]
      tauto
    rw [((hf z hz).add (MeromorphicAt.const a z)).order_congr this]

    by_cases ha: (MeromorphicAt.const a z).order = ‚ä§
    ¬∑ simp [ha]
    ¬∑ rw [WithTop.le_untop'_iff]
      apply AnalyticAt.meromorphicAt_order_nonneg
      exact analyticAt_const
      tauto

  ¬∑ rw [WithTop.le_untop'_iff]
    let A := (hf z hz).order_add (MeromorphicAt.const a z)
    have : 0 ‚â§ min (hf z hz).order (MeromorphicAt.const a z).order := by
      apply le_min
      --
      unfold MeromorphicOn.divisor at h
      simp [hz] at h
      let V := untop'_of_ne_top (d := 0) h‚ÇÅf
      rw [‚Üê V]
      simp [h]
      --
      apply AnalyticAt.meromorphicAt_order_nonneg
      exact analyticAt_const
    exact le_trans this A
    tauto


theorem MeromorphicOn.divisor_add_const‚ÇÇ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z : ‚ÑÇ}
  (hf : MeromorphicOn f U)
  (a : ‚ÑÇ) :
  hf.divisor z < 0 ‚Üí (hf.add (MeromorphicOn.const a)).divisor z < 0 := by
  intro h

  by_cases hz : z ‚àâ U
  ¬∑ have : hf.divisor z = 0 := by
      unfold MeromorphicOn.divisor
      simp [hz]
    rw [this] at h
    tauto

  simp at hz
  unfold MeromorphicOn.divisor
  simp [hz]
  unfold MeromorphicOn.divisor at h
  simp [hz] at h

  have : (hf z hz).order = (((hf.add (MeromorphicOn.const a))) z hz).order := by
    have t‚ÇÄ : (hf z hz).order < (0 : ‚Ñ§) := by
        by_contra hCon
        simp only [not_lt] at hCon
        rw [‚ÜêWithTop.le_untop'_iff (b := 0)] at hCon
        exact Lean.Omega.Int.le_lt_asymm hCon h
        tauto
    rw [‚Üê MeromorphicAt.order_add_of_ne_orders (hf z hz) (MeromorphicAt.const a z)]
    simp

    by_cases ha: (MeromorphicAt.const a z).order = ‚ä§
    ¬∑ simp [ha]
    ¬∑ calc (hf z hz).order
      _ ‚â§ 0 := t‚ÇÄ.le
      _ ‚â§ (MeromorphicAt.const a z).order := by
        apply AnalyticAt.meromorphicAt_order_nonneg
        exact analyticAt_const

    apply ne_of_lt
    calc (hf z hz).order
      _ < 0 := by exact t‚ÇÄ
      _ ‚â§ (MeromorphicAt.const a z).order := by
        apply AnalyticAt.meromorphicAt_order_nonneg
        exact analyticAt_const
  rwa [this] at h


theorem MeromorphicOn.divisor_add_const‚ÇÉ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z : ‚ÑÇ}
  (hf : MeromorphicOn f U)
  (a : ‚ÑÇ) :
  hf.divisor z < 0 ‚Üí (hf.add (MeromorphicOn.const a)).divisor z = hf.divisor z := by
  intro h

  by_cases hz : z ‚àâ U
  ¬∑ have : hf.divisor z = 0 := by
      unfold MeromorphicOn.divisor
      simp [hz]
    rw [this] at h
    tauto

  simp at hz
  unfold MeromorphicOn.divisor
  simp [hz]
  unfold MeromorphicOn.divisor at h
  simp [hz] at h

  have : (hf z hz).order = (((hf.add (MeromorphicOn.const a))) z hz).order := by
    have t‚ÇÄ : (hf z hz).order < (0 : ‚Ñ§) := by
        by_contra hCon
        simp only [not_lt] at hCon
        rw [‚ÜêWithTop.le_untop'_iff (b := 0)] at hCon
        exact Lean.Omega.Int.le_lt_asymm hCon h
        tauto
    rw [‚Üê MeromorphicAt.order_add_of_ne_orders (hf z hz) (MeromorphicAt.const a z)]
    simp

    by_cases ha: (MeromorphicAt.const a z).order = ‚ä§
    ¬∑ simp [ha]
    ¬∑ calc (hf z hz).order
      _ ‚â§ 0 := t‚ÇÄ.le
      _ ‚â§ (MeromorphicAt.const a z).order := by
        apply AnalyticAt.meromorphicAt_order_nonneg
        exact analyticAt_const

    apply ne_of_lt
    calc (hf z hz).order
      _ < 0 := by exact t‚ÇÄ
      _ ‚â§ (MeromorphicAt.const a z).order := by
        apply AnalyticAt.meromorphicAt_order_nonneg
        exact analyticAt_const
  rw [this]


theorem MeromorphicOn.divisor_of_makeStronglyMeromorphicOn
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (hf : MeromorphicOn f U) :
  hf.divisor = (stronglyMeromorphicOn_of_makeStronglyMeromorphicOn hf).meromorphicOn.divisor := by
  unfold MeromorphicOn.divisor
  simp
  funext z
  by_cases hz : z ‚àà U
  ¬∑ simp [hz]
    congr 1
    apply MeromorphicAt.order_congr
    exact EventuallyEq.symm (makeStronglyMeromorphicOn_changeDiscrete hf hz)
  ¬∑ simp [hz]



-- STRONGLY MEROMORPHIC THINGS

/- Strongly MeromorphicOn of non-negative order is analytic -/
theorem StronglyMeromorphicOn.analyticOnNhd
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅf : StronglyMeromorphicOn f U)
  (h‚ÇÇf : ‚àÄ x, (hx : x ‚àà U) ‚Üí 0 ‚â§ h‚ÇÅf.meromorphicOn.divisor x) :
  AnalyticOnNhd ‚ÑÇ f U := by

  apply StronglyMeromorphicOn.analytic
  intro z hz
  let A := h‚ÇÇf z hz
  unfold MeromorphicOn.divisor at A
  simp [hz] at A
  by_cases h : (h‚ÇÅf z hz).meromorphicAt.order = ‚ä§
  ¬∑ rw [h]
    simp
  ¬∑ rw [WithTop.le_untop'_iff] at A
    tauto
    tauto
  assumption


theorem StronglyMeromorphicOn.support_divisor
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅf : StronglyMeromorphicOn f U)
  (h‚ÇÇf : ‚àÉ u : U, f u ‚â† 0)
  (hU : IsConnected U) :
  U ‚à© f‚Åª¬π' {0} = (Function.support h‚ÇÅf.meromorphicOn.divisor) := by

  ext u
  constructor
  ¬∑ intro hu
    unfold MeromorphicOn.divisor
    simp [h‚ÇÅf.order_ne_top hU h‚ÇÇf ‚ü®u, hu.1‚ü©]
    use hu.1
    rw [(h‚ÇÅf u hu.1).order_eq_zero_iff]
    simp
    exact hu.2
  ¬∑ intro hu
    simp at hu
    let A := h‚ÇÅf.meromorphicOn.divisor.supportInU hu
    constructor
    ¬∑ exact h‚ÇÅf.meromorphicOn.divisor.supportInU hu
    ¬∑ simp
      let B := (h‚ÇÅf u A).order_eq_zero_iff.not
      simp at B
      rw [‚Üê B]
      unfold MeromorphicOn.divisor at hu
      simp [A] at hu
      exact hu.1
