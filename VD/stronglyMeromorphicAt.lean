import Mathlib.Analysis.Meromorphic.Basic
import Mathlib.Algebra.Order.AddGroupWithTop
import VD.mathlibAddOn
import VD.meromorphicAt


open Topology


/- Strongly MeromorphicAt -/
def StronglyMeromorphicAt
  (f : ‚ÑÇ ‚Üí ‚ÑÇ)
  (z‚ÇÄ : ‚ÑÇ) :=
  (‚àÄ·∂† (z : ‚ÑÇ) in nhds z‚ÇÄ, f z = 0) ‚à® (‚àÉ (n : ‚Ñ§), ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (AnalyticAt ‚ÑÇ g z‚ÇÄ) ‚àß (g z‚ÇÄ ‚â† 0) ‚àß (‚àÄ·∂† (z : ‚ÑÇ) in nhds z‚ÇÄ, f z = (z - z‚ÇÄ) ^ n ‚Ä¢ g z))


lemma stronglyMeromorphicAt_of_mul_analytic'
  {f g : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (h‚ÇÅg : AnalyticAt ‚ÑÇ g z‚ÇÄ)
  (h‚ÇÇg : g z‚ÇÄ ‚â† 0) :
  StronglyMeromorphicAt f z‚ÇÄ ‚Üí StronglyMeromorphicAt (f * g) z‚ÇÄ := by

  intro hf
  --unfold StronglyMeromorphicAt at hf
  rcases hf with h‚ÇÅf|h‚ÇÅf
  ¬∑ left
    rw [eventually_nhds_iff] at h‚ÇÅf
    obtain ‚ü®t, ht‚ü© := h‚ÇÅf
    rw [eventually_nhds_iff]
    use t
    constructor
    ¬∑ intro y hy
      simp
      left
      exact ht.1 y hy
    ¬∑ exact ht.2
  ¬∑ right
    obtain ‚ü®n, g_f, h‚ÇÅg_f, h‚ÇÇg_f, h‚ÇÉg_f‚ü© := h‚ÇÅf
    use n
    use g * g_f
    constructor
    ¬∑ apply AnalyticAt.mul
      exact h‚ÇÅg
      exact h‚ÇÅg_f
    ¬∑ constructor
      ¬∑ simp
        exact ‚ü®h‚ÇÇg, h‚ÇÇg_f‚ü©
      ¬∑ rw [eventually_nhds_iff] at h‚ÇÉg_f
        obtain ‚ü®t, ht‚ü© := h‚ÇÉg_f
        rw [eventually_nhds_iff]
        use t
        constructor
        ¬∑ intro y hy
          simp
          rw [ht.1]
          simp
          ring
          exact hy
        ¬∑ exact ht.2


/- Strongly MeromorphicAt is Meromorphic -/
theorem StronglyMeromorphicAt.meromorphicAt
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : StronglyMeromorphicAt f z‚ÇÄ) :
  MeromorphicAt f z‚ÇÄ := by
  rcases hf with h|h
  ¬∑ use 0; simp
    rw [analyticAt_congr h]
    exact analyticAt_const
  ¬∑ obtain ‚ü®n, g, h‚ÇÅg, _, h‚ÇÉg‚ü© := h
    rw [meromorphicAt_congr' h‚ÇÉg]
    fun_prop


/- Strongly MeromorphicAt of non-negative order is analytic -/
theorem StronglyMeromorphicAt.analytic
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (h‚ÇÅf : StronglyMeromorphicAt f z‚ÇÄ)
  (h‚ÇÇf : 0 ‚â§ h‚ÇÅf.meromorphicAt.order):
  AnalyticAt ‚ÑÇ f z‚ÇÄ := by
  let h‚ÇÅf' := h‚ÇÅf
  rcases h‚ÇÅf' with h|h
  ¬∑ rw [analyticAt_congr h]
    exact analyticAt_const
  ¬∑ obtain ‚ü®n, g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h
    rw [analyticAt_congr h‚ÇÉg]

    have : h‚ÇÅf.meromorphicAt.order = n := by
      rw [MeromorphicAt.order_eq_int_iff]
      use g
      constructor
      ¬∑ exact h‚ÇÅg
      ¬∑ constructor
        ¬∑ exact h‚ÇÇg
        ¬∑ exact Filter.EventuallyEq.filter_mono h‚ÇÉg nhdsWithin_le_nhds
    rw [this] at h‚ÇÇf
    apply AnalyticAt.smul'
    nth_rw 1 [‚Üê Int.toNat_of_nonneg (WithTop.coe_nonneg.mp h‚ÇÇf)]
    fun_prop
    exact h‚ÇÅg


/- Analytic functions are strongly meromorphic -/
theorem AnalyticAt.stronglyMeromorphicAt
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (h‚ÇÅf : AnalyticAt ‚ÑÇ f z‚ÇÄ) :
  StronglyMeromorphicAt f z‚ÇÄ := by
  by_cases h‚ÇÇf : h‚ÇÅf.order = ‚ä§
  ¬∑ rw [AnalyticAt.order_eq_top_iff] at h‚ÇÇf
    tauto
  ¬∑ have : h‚ÇÅf.order ‚â† ‚ä§ := h‚ÇÇf
    rw [‚Üê ENat.coe_toNat_eq_self] at this
    rw [eq_comm, AnalyticAt.order_eq_nat_iff] at this
    right
    use h‚ÇÅf.order.toNat
    obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := this
    use g
    tauto


/- Strong meromorphic depends only on germ -/
theorem stronglyMeromorphicAt_congr
  {f g : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hfg : f =·∂†[ùìù z‚ÇÄ] g) :
  StronglyMeromorphicAt f z‚ÇÄ ‚Üî StronglyMeromorphicAt g z‚ÇÄ := by
  unfold StronglyMeromorphicAt
  constructor
  ¬∑ intro h
    rcases h with h|h
    ¬∑ left
      exact Filter.EventuallyEq.rw h (fun x => Eq (g x)) (id (Filter.EventuallyEq.symm hfg))
    ¬∑ obtain ‚ü®n, h, h‚ÇÅh, h‚ÇÇh, h‚ÇÉh‚ü© := h
      right
      use n
      use h
      constructor
      ¬∑ assumption
      ¬∑ constructor
        ¬∑ assumption
        ¬∑ apply Filter.EventuallyEq.trans hfg.symm
          assumption
  ¬∑ intro h
    rcases h with h|h
    ¬∑ left
      exact Filter.EventuallyEq.rw h (fun x => Eq (f x)) hfg
    ¬∑ obtain ‚ü®n, h, h‚ÇÅh, h‚ÇÇh, h‚ÇÉh‚ü© := h
      right
      use n
      use h
      constructor
      ¬∑ assumption
      ¬∑ constructor
        ¬∑ assumption
        ¬∑ apply Filter.EventuallyEq.trans hfg
          assumption

/- A function is strongly meromorphic at a point iff it is strongly meromorphic
   after multiplication with a non-vanishing analytic function
-/
theorem stronglyMeromorphicAt_of_mul_analytic
  {f g : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (h‚ÇÅg : AnalyticAt ‚ÑÇ g z‚ÇÄ)
  (h‚ÇÇg : g z‚ÇÄ ‚â† 0) :
  StronglyMeromorphicAt f z‚ÇÄ ‚Üî StronglyMeromorphicAt (f * g) z‚ÇÄ := by
  constructor
  ¬∑ apply stronglyMeromorphicAt_of_mul_analytic' h‚ÇÅg h‚ÇÇg
  ¬∑ intro hprod
    let g' := fun z ‚Ü¶ (g z)‚Åª¬π
    have h‚ÇÅg' := h‚ÇÅg.inv h‚ÇÇg
    have h‚ÇÇg' : g' z‚ÇÄ ‚â† 0 := by
      exact inv_ne_zero h‚ÇÇg

    let B := stronglyMeromorphicAt_of_mul_analytic' h‚ÇÅg' h‚ÇÇg' (f := f * g) hprod
    have : f =·∂†[ùìù z‚ÇÄ] f * g * fun x => (g x)‚Åª¬π := by
      unfold Filter.EventuallyEq
      apply Filter.eventually_iff_exists_mem.mpr
      use g‚Åª¬π' {0}·∂ú
      constructor
      ¬∑ apply ContinuousAt.preimage_mem_nhds
        exact AnalyticAt.continuousAt h‚ÇÅg
        exact compl_singleton_mem_nhds_iff.mpr h‚ÇÇg
      ¬∑ intro y hy
        simp at hy
        simp [hy]
    rwa [stronglyMeromorphicAt_congr this]


theorem StronglyMeromorphicAt.order_eq_zero_iff
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : StronglyMeromorphicAt f z‚ÇÄ) :
  hf.meromorphicAt.order = 0 ‚Üî f z‚ÇÄ ‚â† 0 := by
  constructor
  ¬∑ intro h‚ÇÅf
    let A := hf.analytic (le_of_eq (id (Eq.symm h‚ÇÅf)))
    apply A.order_eq_zero_iff.1
    let B := A.meromorphicAt_order
    rw [h‚ÇÅf] at B
    apply WithTopCoe
    rw [eq_comm]
    exact B
  ¬∑ intro h
    have hf' := hf
    rcases hf with h‚ÇÅ|h‚ÇÅ
    ¬∑ have : f z‚ÇÄ = 0 := by
        apply Filter.EventuallyEq.eq_of_nhds h‚ÇÅ
      tauto
    ¬∑ obtain ‚ü®n, g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h‚ÇÅ
      have : n = 0 := by
        by_contra hContra
        let A := Filter.EventuallyEq.eq_of_nhds h‚ÇÉg
        have : (0 : ‚ÑÇ) ^ n = 0 := by
          exact zero_zpow n hContra
        simp at A
        simp_rw [this] at A
        simp at A
        tauto
      rw [this] at h‚ÇÉg
      simp at h‚ÇÉg

      have : hf'.meromorphicAt.order = 0 := by
        apply (hf'.meromorphicAt.order_eq_int_iff 0).2
        use g
        constructor
        ¬∑ assumption
        ¬∑ constructor
          ¬∑ assumption
          ¬∑ simp
            apply Filter.EventuallyEq.filter_mono h‚ÇÉg
            exact nhdsWithin_le_nhds
      exact this


theorem StronglyMeromorphicAt.localIdentity
  {f g : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : StronglyMeromorphicAt f z‚ÇÄ)
  (hg : StronglyMeromorphicAt g z‚ÇÄ) :
  f =·∂†[ùìù[‚â†] z‚ÇÄ] g ‚Üí f =·∂†[ùìù z‚ÇÄ] g := by

  intro h

  have t‚ÇÄ : hf.meromorphicAt.order = hg.meromorphicAt.order := by
    exact hf.meromorphicAt.order_congr h

  by_cases cs : hf.meromorphicAt.order = 0
  ¬∑ rw [cs] at t‚ÇÄ
    have h‚ÇÅf := hf.analytic (le_of_eq (id (Eq.symm cs)))
    have h‚ÇÅg := hg.analytic (le_of_eq t‚ÇÄ)
    exact h‚ÇÅf.localIdentity h‚ÇÅg h
  ¬∑ apply Mnhds h
    let A := cs
    rw [hf.order_eq_zero_iff] at A
    simp at A
    let B := cs
    rw [t‚ÇÄ] at B
    rw [hg.order_eq_zero_iff] at B
    simp at B
    rw [A, B]



/- Make strongly MeromorphicAt -/
noncomputable def MeromorphicAt.makeStronglyMeromorphicAt
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : MeromorphicAt f z‚ÇÄ) :
  ‚ÑÇ ‚Üí ‚ÑÇ := by
  intro z
  by_cases z = z‚ÇÄ
  ¬∑ by_cases h‚ÇÅf : hf.order = (0 : ‚Ñ§)
    ¬∑ rw [hf.order_eq_int_iff] at h‚ÇÅf
      exact (Classical.choose h‚ÇÅf) z‚ÇÄ
    ¬∑ exact 0
  ¬∑ exact f z


lemma m‚ÇÅ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : MeromorphicAt f z‚ÇÄ) :
  ‚àÄ z ‚â† z‚ÇÄ, f z = hf.makeStronglyMeromorphicAt z := by
  intro z hz
  unfold MeromorphicAt.makeStronglyMeromorphicAt
  simp [hz]


lemma m‚ÇÇ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : MeromorphicAt f z‚ÇÄ) :
  f =·∂†[ùìù[‚â†] z‚ÇÄ] hf.makeStronglyMeromorphicAt := by
  apply eventually_nhdsWithin_of_forall
  exact fun x a => m‚ÇÅ hf x a


theorem StronglyMeromorphicAt_of_makeStronglyMeromorphic
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : MeromorphicAt f z‚ÇÄ) :
  StronglyMeromorphicAt hf.makeStronglyMeromorphicAt z‚ÇÄ := by

  by_cases h‚ÇÇf : hf.order = ‚ä§
  ¬∑ have : hf.makeStronglyMeromorphicAt =·∂†[ùìù z‚ÇÄ] 0 := by
      apply Mnhds
      ¬∑ apply Filter.EventuallyEq.trans (Filter.EventuallyEq.symm (m‚ÇÇ hf))
        exact (MeromorphicAt.order_eq_top_iff hf).1 h‚ÇÇf
      ¬∑ unfold MeromorphicAt.makeStronglyMeromorphicAt
        simp [h‚ÇÇf]

    apply AnalyticAt.stronglyMeromorphicAt
    rw [analyticAt_congr this]
    apply analyticAt_const
  ¬∑ let n := hf.order.untop h‚ÇÇf
    have : hf.order = n := by
      exact Eq.symm (WithTop.coe_untop hf.order h‚ÇÇf)
    rw [hf.order_eq_int_iff] at this
    obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := this
    right
    use n
    use g
    constructor
    ¬∑ assumption
    ¬∑ constructor
      ¬∑ assumption
      ¬∑ apply Mnhds
        ¬∑ apply Filter.EventuallyEq.trans (Filter.EventuallyEq.symm (m‚ÇÇ hf))
          exact h‚ÇÉg
        ¬∑ unfold MeromorphicAt.makeStronglyMeromorphicAt
          simp
          by_cases h‚ÇÉf : hf.order = (0 : ‚Ñ§)
          ¬∑ let h‚ÇÑf := (hf.order_eq_int_iff 0).1 h‚ÇÉf
            simp [h‚ÇÉf]
            obtain ‚ü®h‚ÇÅG, h‚ÇÇG, h‚ÇÉG‚ü©  := Classical.choose_spec h‚ÇÑf
            simp at h‚ÇÉG
            have hn : n = 0 := Eq.symm ((fun {Œ±} {a} {b} h => (WithTop.eq_untop_iff h).mpr) h‚ÇÇf (id (Eq.symm h‚ÇÉf)))
            rw [hn]
            rw [hn] at h‚ÇÉg; simp at h‚ÇÉg
            simp
            have : g =·∂†[ùìù z‚ÇÄ] (Classical.choose h‚ÇÑf) := by
              apply h‚ÇÅg.localIdentity h‚ÇÅG
              exact Filter.EventuallyEq.trans (Filter.EventuallyEq.symm h‚ÇÉg) h‚ÇÉG
            rw [Filter.EventuallyEq.eq_of_nhds this]
          ¬∑ have : hf.order ‚â† 0 := h‚ÇÉf
            simp [this]
            left
            apply zero_zpow n
            dsimp [n]
            rwa [WithTop.untop_eq_iff h‚ÇÇf]


theorem StronglyMeromorphicAt.makeStronglyMeromorphic_id
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : StronglyMeromorphicAt f z‚ÇÄ) :
  f = hf.meromorphicAt.makeStronglyMeromorphicAt := by

  funext z
  by_cases hz : z = z‚ÇÄ
  ¬∑ rw [hz]
    unfold MeromorphicAt.makeStronglyMeromorphicAt
    simp
    have h‚ÇÄf := hf
    rcases hf with h‚ÇÅf|h‚ÇÅf
    ¬∑ have A : f =·∂†[ùìù[‚â†] z‚ÇÄ] 0 := by
        apply Filter.EventuallyEq.filter_mono h‚ÇÅf
        exact nhdsWithin_le_nhds
      let B := (MeromorphicAt.order_eq_top_iff h‚ÇÄf.meromorphicAt).2 A
      simp [B]
      exact Filter.EventuallyEq.eq_of_nhds h‚ÇÅf
    ¬∑ obtain ‚ü®n, g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h‚ÇÅf
      rw [Filter.EventuallyEq.eq_of_nhds h‚ÇÉg]
      have : h‚ÇÄf.meromorphicAt.order = n := by
        rw [MeromorphicAt.order_eq_int_iff (StronglyMeromorphicAt.meromorphicAt h‚ÇÄf) n]
        use g
        constructor
        ¬∑ assumption
        ¬∑ constructor
          ¬∑ assumption
          ¬∑ exact eventually_nhdsWithin_of_eventually_nhds h‚ÇÉg
      by_cases h‚ÇÉf : h‚ÇÄf.meromorphicAt.order = 0
      ¬∑ simp [h‚ÇÉf]
        have hn : n = (0 : ‚Ñ§) := by
          rw [h‚ÇÉf] at this
          exact WithTop.coe_eq_zero.mp (id (Eq.symm this))
        simp_rw [hn]
        simp
        let t‚ÇÄ : h‚ÇÄf.meromorphicAt.order = (0 : ‚Ñ§) := by
          exact h‚ÇÉf
        let A := (h‚ÇÄf.meromorphicAt.order_eq_int_iff 0).1 t‚ÇÄ
        have : g =·∂†[ùìù z‚ÇÄ] (Classical.choose A) := by
          obtain ‚ü®h‚ÇÄ, h‚ÇÅ, h‚ÇÇ‚ü©  := Classical.choose_spec A
          apply h‚ÇÅg.localIdentity h‚ÇÄ
          rw [hn] at h‚ÇÉg
          simp at h‚ÇÉg
          simp at h‚ÇÇ
          have h‚ÇÑg : f =·∂†[ùìù[‚â†] z‚ÇÄ] g := by
            apply Filter.EventuallyEq.filter_mono h‚ÇÉg
            exact nhdsWithin_le_nhds
          exact Filter.EventuallyEq.trans (Filter.EventuallyEq.symm h‚ÇÑg) h‚ÇÇ
        exact Filter.EventuallyEq.eq_of_nhds this
      ¬∑ simp [h‚ÇÉf]
        left
        apply zero_zpow n
        by_contra hn
        rw [hn] at this
        tauto
  ¬∑ exact m‚ÇÅ (StronglyMeromorphicAt.meromorphicAt hf) z hz


theorem StronglyMeromorphicAt.eliminate
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (h‚ÇÅf : StronglyMeromorphicAt f z‚ÇÄ)
  (h‚ÇÇf : h‚ÇÅf.meromorphicAt.order ‚â† ‚ä§) :
  ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (AnalyticAt ‚ÑÇ g z‚ÇÄ)
    ‚àß (g z‚ÇÄ ‚â† 0)
    ‚àß (f = (fun z ‚Ü¶ (z-z‚ÇÄ) ^ (h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf)) * g) := by

  let g‚ÇÅ := (fun z ‚Ü¶ (z-z‚ÇÄ) ^ (-h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf)) * f
  let g‚ÇÅ‚ÇÅ := fun z ‚Ü¶ (z-z‚ÇÄ) ^ (-h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf)
  have h‚ÇÅg‚ÇÅ‚ÇÅ : MeromorphicAt g‚ÇÅ‚ÇÅ z‚ÇÄ := by fun_prop
  have h‚ÇÇg‚ÇÅ‚ÇÅ : h‚ÇÅg‚ÇÅ‚ÇÅ.order = - h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf := by
    rw [‚Üê WithTop.LinearOrderedAddCommGroup.coe_neg]
    rw [h‚ÇÅg‚ÇÅ‚ÇÅ.order_eq_int_iff]
    use 1
    constructor
    ¬∑ exact analyticAt_const
    ¬∑ constructor
      ¬∑ simp
      ¬∑ apply eventually_nhdsWithin_of_forall
        simp [g‚ÇÅ‚ÇÅ]
  have h‚ÇÅg‚ÇÅ : MeromorphicAt g‚ÇÅ z‚ÇÄ := h‚ÇÅg‚ÇÅ‚ÇÅ.mul h‚ÇÅf.meromorphicAt
  have h‚ÇÇg‚ÇÅ : h‚ÇÅg‚ÇÅ.order = 0 := by
    rw [h‚ÇÅg‚ÇÅ‚ÇÅ.order_mul h‚ÇÅf.meromorphicAt]
    rw [h‚ÇÇg‚ÇÅ‚ÇÅ]
    simp
    rw [add_comm]
    rw [LinearOrderedAddCommGroupWithTop.add_neg_cancel_of_ne_top h‚ÇÇf]
  let g := h‚ÇÅg‚ÇÅ.makeStronglyMeromorphicAt
  use g
  have h‚ÇÅg : StronglyMeromorphicAt g z‚ÇÄ := by
    exact StronglyMeromorphicAt_of_makeStronglyMeromorphic h‚ÇÅg‚ÇÅ
  have h‚ÇÇg : h‚ÇÅg.meromorphicAt.order = 0 := by
    rw [‚Üê h‚ÇÅg‚ÇÅ.order_congr (m‚ÇÇ h‚ÇÅg‚ÇÅ)]
    exact h‚ÇÇg‚ÇÅ
  constructor
  ¬∑ apply analytic
    ¬∑ rw [h‚ÇÇg]
    ¬∑ exact h‚ÇÅg
  ¬∑ constructor
    ¬∑ rwa [‚Üê h‚ÇÅg.order_eq_zero_iff]
    ¬∑ funext z
      by_cases hz : z = z‚ÇÄ
      ¬∑ by_cases hOrd : h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf = 0
        ¬∑ simp [hOrd]
          have : StronglyMeromorphicAt g‚ÇÅ z‚ÇÄ := by
            unfold g‚ÇÅ
            simp [hOrd]
            have : (fun z => 1) * f = f := by
              funext z
              simp
            rwa [this]
          rw [hz]
          unfold g
          let A := makeStronglyMeromorphic_id this
          rw [‚Üê A]
          unfold g‚ÇÅ
          rw [hOrd]
          simp
        ¬∑ have : h‚ÇÅf.meromorphicAt.order ‚â† 0 := by
            by_contra hC
            simp_rw [hC] at hOrd
            tauto
          let A := h‚ÇÅf.order_eq_zero_iff.not.1 this
          simp at A
          rw [hz, A]
          simp
          left
          rw [zpow_eq_zero_iff]
          assumption
      ¬∑ simp
        have : g z = g‚ÇÅ z := by
          exact Eq.symm (m‚ÇÅ h‚ÇÅg‚ÇÅ z hz)
        rw [this]
        unfold g‚ÇÅ
        simp [hz]
        rw [‚Üê mul_assoc]
        rw [mul_inv_cancel‚ÇÄ]
        simp
        apply zpow_ne_zero
        exact sub_ne_zero_of_ne hz
